// code coverage
'use strict';var cov=cov || {};cov.covered = [];cov.cover = function(index){cov.covered[index] = true;if(cov.callout){cov.callout(index);}}; // gridponent.js
// version : 0.1-beta
// author : Todd Piltingsrud
// license : MIT
/***************\
   Gridponent
\***************/var gridponent=gridponent || function(elem,options){cov.cover(1);'use strict'; // check for a selector
if(typeof elem == 'string'){cov.cover(2);elem = document.querySelector(elem);}if(elem instanceof HTMLElement){cov.cover(3); // has this already been initialized?
var tblContainer=elem.querySelector('.table-container');if(tblContainer && tblContainer.api)return tblContainer.api;var init=new gridponent.Initializer(elem);var config=init.initializeOptions(options);return config.node.api;}else {cov.cover(4);throw new Error("Could not resolve selector: " + elem.toString());}};(function(gp){'use strict'; /***************\
      API
\***************/gp.events = {rowSelected:'rowselected',beforeInit:'beforeinit', // turn progress indicator on
beforeRead:'beforeread', // turn progress indicator on
beforeEdit:'beforeedit', // turn progress indicator off
onRead:'onread', // turn progress indicator off
// raised after create, update and delete
onEdit:'onedit', // gives external code the opportunity to initialize UI elements (e.g. datepickers)
editReady:'editready', // turn progress indicator off
httpError:'httpError', // happens once after the grid is fully initialized and databound
ready:'ready'};gp.api = function(controller){cov.cover(5);this.controller = controller;this.config = controller.config;this.$n = $(this.config.node);};gp.api.prototype = {create:function create(dataItem){cov.cover(6);this.controller.addRow(dataItem);return this;},destroy:function destroy(dataItem,callback){cov.cover(7);this.controller.deleteRow(dataItem,callback,true);return this;},dispose:function dispose(){cov.cover(8);this.controller.dispose();return this;},find:function find(selector){cov.cover(9); // include this.$n via addBack
return this.$n.find(selector).addBack(selector);},getData:function getData(uidOrTableRow){cov.cover(10);if(uidOrTableRow != undefined)return this.config.map.get(uidOrTableRow);return this.controller.config.pageModel.data;},getTableRow:function getTableRow(dataItem){cov.cover(11);return gp.getTableRow(this.controller.config.map,dataItem,this.controller.config.node);},read:function read(requestModel,callback){cov.cover(12);this.controller.read(requestModel,callback);return this;},refresh:function refresh(callback){cov.cover(13);this.controller.read(null,callback);return this;},saveChanges:function saveChanges(dataItem,done){cov.cover(14);this.controller.updateRow(dataItem,done);return this;},search:function search(searchTerm,callback){cov.cover(15); // make sure we pass in a string
searchTerm = gp.isNullOrEmpty(searchTerm)?'':searchTerm.toString();this.controller.search(searchTerm,callback);return this;},sort:function sort(name,desc,callback){cov.cover(16); // validate the args
name = gp.isNullOrEmpty(name)?'':name.toString();desc = typeof desc == 'boolean'?desc:desc === 'false'?false:!!desc;this.controller.sort(name,desc,callback);return this;},toggleBusy:function toggleBusy(isBusy){cov.cover(17); // use the passed in arg if present, else toggle it
isBusy = isBusy === true || isBusy === false?isBusy:!this.$n.hasClass('busy');if(isBusy){cov.cover(18);this.$n.addClass('busy');}else {cov.cover(19);this.$n.removeClass('busy');}return this;}};Object.getOwnPropertyNames(gp.events).forEach(function(evt){cov.cover(20);gp.api.prototype[evt] = function(callback){cov.cover(21);if(typeof callback === 'function'){cov.cover(22);this.controller.addDelegate(gp.events[evt],callback);}return this;};});gp.api.prototype.ready = function(callback){cov.cover(23);this.controller.ready(callback);return this;};gp.api.prototype.rowSelected = function(callback){cov.cover(24);if(typeof callback === 'function'){cov.cover(25);this.controller.addDelegate(gp.events.rowSelected,callback);this.$n.addClass('selectable');}return this;}; /***************\
   controller
\***************/gp.Controller = function(config,model,requestModel,injector){cov.cover(26);this.config = config;this.model = model;this.$n = $(config.node);this.requestModel = requestModel;this.injector = injector;if(config.pager){cov.cover(27);this.requestModel.top = 25;}this.handlers = {readHandler:this.read.bind(this),commandHandler:this.commandHandler.bind(this),rowSelectHandler:this.rowSelectHandler.bind(this),httpErrorHandler:this.httpErrorHandler.bind(this),toolbarChangeHandler:this.toolbarChangeHandler.bind(this),toolbarEnterKeyHandler:this.toolbarEnterKeyHandler.bind(this)};this.done = false;this.eventDelegates = {};this.addBusyDelegates();};gp.Controller.prototype = {init:function init(){cov.cover(28);var self=this;this.addCommandHandlers(this.config.node);this.addRowSelectHandler(this.config);this.addRefreshEventHandler(this.config);this.addToolbarChangeHandler();this.done = true;this.invokeDelegates(gp.events.ready,this.config.node.api);},addBusyDelegates:function addBusyDelegates(){cov.cover(29);this.addDelegate(gp.events.beforeRead,this.addBusy);this.addDelegate(gp.events.onRead,this.removeBusy);this.addDelegate(gp.events.beforeEdit,this.addBusy);this.addDelegate(gp.events.onEdit,this.removeBusy);this.addDelegate(gp.events.httpError,this.removeBusy);},addBusy:function addBusy(){cov.cover(30); // this function executes with the api as its context
this.$n.addClass('busy');},removeBusy:function removeBusy(){cov.cover(31); // this function executes with the api as its context
this.$n.removeClass('busy');},ready:function ready(callback){cov.cover(32);if(this.done){cov.cover(33);gp.applyFunc(callback,this.config.node.api,this.config.node.api);}else {cov.cover(34);this.addDelegate(gp.events.ready,callback);}},addDelegate:function addDelegate(event,delegate){cov.cover(35);this.eventDelegates[event] = this.eventDelegates[event] || [];this.eventDelegates[event].push(delegate);},invokeDelegates:function invokeDelegates(event,args){cov.cover(36);var self=this,proceed=true,delegates=this.eventDelegates[event];if(Array.isArray(delegates)){cov.cover(37);delegates.forEach(function(delegate){cov.cover(38);if(proceed === false)return;proceed = gp.applyFunc(delegate,self.config.node.api,args);});}return proceed;},addToolbarChangeHandler:function addToolbarChangeHandler(){cov.cover(39); // monitor changes to search, sort, and paging
var selector='.table-toolbar [name], thead input, .table-pager input';this.$n.on('change',selector,this.handlers.toolbarChangeHandler);this.$n.on('keydown',selector,this.handlers.toolbarEnterKeyHandler);},removeToolbarChangeHandler:function removeToolbarChangeHandler(){cov.cover(40);this.$n.off('change',this.handlers.toolbarChangeHandler);this.$n.off('keydown',this.handlers.toolbarEnterKeyHandler);},toolbarEnterKeyHandler:function toolbarEnterKeyHandler(evt){cov.cover(41); // tracks the search and paging textboxes
if(evt.keyCode == 13){cov.cover(42); // trigger change event
evt.target.blur();return;}},toolbarChangeHandler:function toolbarChangeHandler(evt){cov.cover(43); // tracks the search and paging textboxes
var name=evt.target.name,model=this.config.pageModel,type=gp.getType(model[name]),val=gp.ModelSync.cast(evt.target.value,type);model[name] = val;this.read();},addCommandHandlers:function addCommandHandlers(node){cov.cover(44); // listen for command button clicks at the grid level
$(node).on('click','button[value],a[value]',this.handlers.commandHandler);},removeCommandHandlers:function removeCommandHandlers(node){cov.cover(45);$(node).off('click',this.handlers.commandHandler);},commandHandler:function commandHandler(evt){cov.cover(46); // this function handles all the button clicks for the entire grid
var lower,$btn=$(evt.currentTarget),rowOrModal=$btn.closest('tr[data-uid],div.modal',this.config.node),dataItem=rowOrModal.length?this.config.map.get(rowOrModal[0]):null,value=$btn.attr('value'),cmd=gp.getCommand(this.config.columns,value),model=this.config.pageModel; // stop the event from being handled by rowSelectHandler
evt.stopPropagation(); // check for a user-defined command
if(cmd && typeof cmd.func === 'function'){cov.cover(47);cmd.func.call(this.config.node.api,dataItem);return;};lower = (value || '').toLowerCase();switch(lower){case 'addrow':cov.cover(48);this.addRow();break;case 'edit':cov.cover(49); // the button is inside either a table row or a modal
this.editRow(dataItem,rowOrModal);break;case 'delete':cov.cover(50);case 'destroy':cov.cover(51);this.deleteRow(dataItem,rowOrModal);break;case 'page':cov.cover(52);var page=$btn.attr('data-page');model.page = parseInt(page);this.read();break;case 'search':cov.cover(53);model.search = this.$n.find('.table-toolbar input[name=search]').val();this.read();break;case 'sort':cov.cover(54);var sort=$btn.attr('data-sort');if(model.sort === sort){cov.cover(55);model.desc = !model.desc;}else {cov.cover(56);model.sort = sort;model.desc = false;}this.read();break;default:cov.cover(57); // check for a function
// this is needed in case there's a custom command in the toolbar
cmd = gp.getObjectAtPath($btn.val());if(typeof cmd == 'function'){cov.cover(58);cmd.call(this.config.node.api,dataItem);}break;}},getEditor:function getEditor(mode){cov.cover(59);var self=this,editor;if(mode == undefined){cov.cover(60);editor = new gp.Editor(this.config,this.model,this.injector);}else if(mode == 'modal'){cov.cover(61);editor = new gp.ModalEditor(this.config,this.model,this.injector);}else {cov.cover(62);editor = new gp.TableRowEditor(this.config,this.model,this.injector);}editor.beforeEdit = function(model){cov.cover(63);self.invokeDelegates(gp.events.beforeEdit,model);};editor.afterEdit = function(model){cov.cover(64);self.invokeDelegates(gp.events.onEdit,model);};editor.editReady = function(model){cov.cover(65);self.invokeDelegates(gp.events.editReady,model);};return editor;},addRowSelectHandler:function addRowSelectHandler(config){cov.cover(66); // always add click handler so we can call api.rowSelected after grid is initialized
this.$n.on('click','div.table-body > table > tbody > tr > td.body-cell',this.handlers.rowSelectHandler);},removeRowSelectHandler:function removeRowSelectHandler(){cov.cover(67);this.$n.off('click',this.handlers.rowSelectHandler);},rowSelectHandler:function rowSelectHandler(evt){cov.cover(68);var config=this.config,tr=$(evt.target).closest('tr',config.node),trs=this.$n.find('div.table-body > table > tbody > tr.selected'),type=typeof config.rowselected,dataItem,proceed;if(type === 'string' && config.rowselected.indexOf('{{') !== -1)type = 'urlTemplate';trs.removeClass('selected'); // add selected class
$(tr).addClass('selected'); // get the dataItem for this tr
dataItem = config.map.get(tr);proceed = this.invokeDelegates(gp.events.rowSelected,dataItem);if(proceed === false)return;if(type === 'urlTemplate'){cov.cover(69);window.location = gp.supplant.call(this.config.node.api,config.rowselected,dataItem);}},addRefreshEventHandler:function addRefreshEventHandler(config){cov.cover(70);if(config.refreshevent){cov.cover(71);$(document).on(config.refreshevent,this.handlers.readHandler);}},removeRefreshEventHandler:function removeRefreshEventHandler(config){cov.cover(72);if(config.refreshevent){cov.cover(73);$(document).off(config.refreshevent,this.handlers.readHandler);}},search:function search(searchTerm,callback){cov.cover(74);this.config.pageModel.search = searchTerm;this.$n.find('div.table-toolbar input[name=search]').val(searchTerm);this.read(null,callback);},sort:function sort(field,desc,callback){cov.cover(75);this.config.pageModel.sort = field;this.config.pageModel.desc = desc == true;this.read(null,callback);},read:function read(requestModel,callback){cov.cover(76);var self=this,proceed=true;if(requestModel){cov.cover(77);gp.shallowCopy(requestModel,this.config.pageModel);}proceed = this.invokeDelegates(gp.events.beforeRead,this.config.node.api);if(proceed === false)return;this.model.read(this.config.pageModel,function(model){cov.cover(78);try{ // do a case-insensitive copy
gp.shallowCopy(model,self.config.pageModel,true);self.injector.setResource('$data',self.config.pageModel.data);self.config.map.clear();gp.resolveTypes(self.config);self.refresh(self.config);self.invokeDelegates(gp.events.onRead,self.config.node.api);gp.applyFunc(callback,self.config.node,self.config.pageModel);}catch(e) {self.removeBusy();self.httpErrorHandler(e);}},this.handlers.httpErrorHandler);},addRow:function addRow(dataItem){cov.cover(79);var editor=this.getEditor(this.config.editmode);var model=editor.add(dataItem);return editor;},editRow:function editRow(dataItem,elem){cov.cover(80);var editor=this.getEditor(this.config.editmode);var model=editor.edit(dataItem,elem);return editor;},updateRow:function updateRow(dataItem,callback){cov.cover(81);try{var self=this,editor=this.getEditor(),tr; // if there is no update configuration setting, we're done here
if(!gp.hasValue(this.config.update)){cov.cover(82);gp.applyFunc(callback,self.config.node);return;}editor.edit(dataItem);editor.save(function(model){cov.cover(83);tr = gp.getTableRow(self.config.map,dataItem,self.$n[0]);if(tr){cov.cover(84);self.refresh();}if(typeof callback === 'function'){cov.cover(85);gp.applyFunc(callback,self,model);}},this.httpErrorHandler.bind(this));}catch(e) {this.removeBusy();this.httpErrorHandler(e);}}, // we don't require a tr parameter because it may not be in the grid
deleteRow:function deleteRow(dataItem,callback,skipConfirm){cov.cover(86);try{if(!gp.hasValue(this.config.destroy)){cov.cover(87);gp.applyFunc(callback,this.config.node);return;}var self=this,confirmed=skipConfirm || confirm('Are you sure you want to delete this item?'),message,tr=gp.getTableRow(this.config.map,dataItem,this.$n[0]);if(!confirmed){cov.cover(88);gp.applyFunc(callback,this.config.node);return;}this.invokeDelegates(gp.events.beforeEdit,{type:'destroy',dataItem:dataItem,elem:tr});this.model.destroy(dataItem,function(response){cov.cover(89);try{if(!response || !response.errors){cov.cover(90); // if it didn't error out, we'll assume it succeeded
// remove the dataItem from the model
var index=self.config.pageModel.data.indexOf(dataItem);if(index != -1){cov.cover(91);self.config.pageModel.data.splice(index,1);}self.refresh(self.config);}}catch(err) {gp.error(err);}self.invokeDelegates(gp.events.onEdit,{type:'destroy',dataItem:dataItem,elem:tr});gp.applyFunc(callback,self.config.node.api,response);},self.handlers.httpErrorHandler);}catch(e) {this.removeBusy();this.httpErrorHandler(e);}},refresh:function refresh(){cov.cover(92);try{ // inject table rows, footer, pager and header style.
var body=this.$n.find('div.table-body'),footer=this.$n.find('div.table-footer'),pager=this.$n.find('div.table-pager');this.config.map.clear();body.html(this.injector.exec('tableBody')); // if we're not using fixed footers this will have no effect
footer.html(this.injector.exec('footerTable'));pager.html(this.injector.exec('pagerBar'));gp.helpers.sortStyle(this.config);}catch(e) {gp.error(e);}},httpErrorHandler:function httpErrorHandler(e){cov.cover(93);this.invokeDelegates(gp.events.httpError,e);alert('An error occurred while carrying out your request.');gp.error(e);},dispose:function dispose(){cov.cover(94);this.removeRefreshEventHandler(this.config);this.removeRowSelectHandler();this.removeCommandHandlers(this.config.node);this.removeToolbarChangeHandler();}}; /***************\
   DataLayer
\***************/gp.DataLayer = function(config){cov.cover(95);this.config = config;this.reader = null;};gp.DataLayer.prototype = {getReader:function getReader(){cov.cover(96);var type=gp.getType(this.config.read);switch(type){case 'string':cov.cover(97);return new gp.ServerPager(this.config.read);break;case 'function':cov.cover(98);return new gp.FunctionPager(this.config);break;case 'object':cov.cover(99); // is it a PagingModel?
if(gp['implements'](this.config.read,gp.PagingModel.prototype)){cov.cover(100);this.config.pageModel = this.config.read;return new gp.ClientPager(this.config);}throw 'Unsupported read configuration';break;case 'array':cov.cover(101);this.config.pageModel.data = this.config.read;return new gp.ClientPager(this.config);break;default:cov.cover(102);throw 'Unsupported read configuration';}},read:function read(requestModel,done,fail){cov.cover(103);var self=this;if(!this.reader){cov.cover(104);this.reader = this.getReader();}this.reader.read(requestModel, // make sure we wrap result in an array when we return it
function(result){cov.cover(105);result = self.resolveResult(result);gp.applyFunc(done,self,[result]);},function(result){gp.applyFunc(fail,self,[result]);});},create:function create(dataItem,done,fail){cov.cover(106);var self=this,url; // config.create can be a function or a URL
if(typeof this.config.create === 'function'){cov.cover(107); // call the function, set the API as the context
gp.applyFunc(this.config.create,this.config.node.api,[dataItem,done,fail],fail);}else {cov.cover(108); // the url can be a template
url = gp.supplant(this.config.create,dataItem); // call the URL
var http=new gp.Http();http.post(url,dataItem,function(arg){gp.applyFunc(done,self,arg);},function(arg){gp.applyFunc(fail,self,arg);});}},update:function update(dataItem,done,fail){cov.cover(109);var self=this,url; // config.update can be a function or URL
if(typeof this.config.update === 'function'){cov.cover(110);gp.applyFunc(this.config.update,this.config.node.api,[dataItem,done,fail],fail);}else {cov.cover(111); // the url can be a template
url = gp.supplant(this.config.update,dataItem);var http=new gp.Http();http.post(url,dataItem,function(arg){gp.applyFunc(done,self,arg);},function(arg){gp.applyFunc(fail,self,arg);});}},destroy:function destroy(dataItem,done,fail){cov.cover(112);var self=this,url; // config.destroy can be a function or URL
if(typeof this.config.destroy === 'function'){cov.cover(113);gp.applyFunc(this.config.destroy,this.config.node.api,[dataItem,done,fail],fail);}else {cov.cover(114); // the url can be a template
url = gp.supplant(this.config.destroy,dataItem);var http=new gp.Http();http.destroy(url,function(arg){gp.applyFunc(done,self,arg);},function(arg){gp.applyFunc(fail,self,arg);});}},resolveResult:function resolveResult(result){cov.cover(115);if(gp.hasValue(result) && Array.isArray(result)){cov.cover(116); //  wrap the array in a PagingModel
return new gp.PagingModel(result);}return result;}}; /***************\
    datamap
\***************/gp.DataMap = function(){cov.cover(117);this.uid = 0;this.map = {};};gp.DataMap.prototype = {assign:function assign(dataItem,elem){cov.cover(118);var i=++this.uid;this.map[i] = dataItem;if(elem && elem.setAttribute){cov.cover(119);elem.setAttribute('data-uid',i.toString());}return i;},get:function get(uidOrElem){cov.cover(120);var uid=this.resolveUid(uidOrElem);return this.map[uid];},getUid:function getUid(dataItem){cov.cover(121);var uid,uids=Object.getOwnPropertyNames(this.map);for(var i=0;i < uids.length;i++) {uid = uids[i];if(this.map[uid] === dataItem)return uid;}return -1;},resolveUid:function resolveUid(uidOrElem){cov.cover(122);var uid=-1;if($.isNumeric(uidOrElem)){cov.cover(123);uid = parseInt(uidOrElem);}else {cov.cover(124);uidOrElem = $(uidOrElem).closest('[data-uid]');if(uidOrElem.length === 1){cov.cover(125);uid = parseInt($(uidOrElem).attr('data-uid'));}}if(isNaN(uid))return -1;return uid;},remove:function remove(uidOrElem){cov.cover(126);var uid=this.resolveUid(uidOrElem);if(uid in this.map){cov.cover(127);delete this.map[uid];}},clear:function clear(){cov.cover(128);this.uid = 0;this.map = {};}}; /***************\
     Editor
\***************/gp.Editor = function(config,dal,injector){cov.cover(129);this.config = config;this.dal = dal;this.uid = null;this.dataItem = null;this.originalDataItem = null;this.mode = null;this.beforeEdit = null;this.afterEdit = null;this.editReady = null;this.button = null;this.$n = $(config.node);this.injector = injector;};gp.Editor.prototype = {add:function add(dataItem){cov.cover(130);this.dataItem = dataItem || this.createDataItem();this.mode = 'create';this.injector.setResource('$dataItem',this.dataItem).setResource('$mode',this.mode); // add the data item to the internal data array
this.config.pageModel.data.push(this.dataItem); // map it
this.uid = this.config.map.assign(this.dataItem);return {dataItem:this.dataItem,uid:this.uid};},edit:function edit(dataItem){cov.cover(131);this.dataItem = dataItem;this.mode = 'update';this.setInjectorContext();this.originalDataItem = gp.shallowCopy(dataItem);return {dataItem:dataItem};},cancel:function cancel(){cov.cover(132);this.setInjectorContext();if(this.mode === 'create'){cov.cover(133); // unmap the dataItem
this.config.map.remove(this.uid); // remove the dataItem from the internal array
var index=this.config.pageModel.data.indexOf(this.dataItem);if(index !== -1){cov.cover(134);this.config.pageModel.data.slice(index,1);}}else if(this.mode == 'update' && this.originalDataItem){cov.cover(135); //restore the dataItem to its original state
gp.shallowCopy(this.originalDataItem,this.dataItem);}this.removeCommandHandler();},httpErrorHandler:function httpErrorHandler(e){cov.cover(136);alert('An error occurred while carrying out your request.');gp.error(e);},save:function save(done,fail){cov.cover(137); // create or update
var self=this,returnedDataItem,serialized,uid,fail=fail || gp.error;this.setInjectorContext();this.addBusy(); // it's possible for the API to invoke this save method
// there won't be a form element in that case
if(this.elem){cov.cover(138); // serialize the form
serialized = gp.ModelSync.serialize(this.elem); // currently the only supported post format is application/x-www-form-urlencoded
// so normally there'd be no point in converting the serialized form values to their former types
// but we can't rely on the server to return an updated model (it may simply return a success/fail message)
// so we'll convert them anyway
gp.ModelSync.castValues(serialized,this.config.columns); // copy the values back to the original dataItem
gp.shallowCopy(serialized,this.dataItem);}if(typeof this.beforeEdit == 'function'){cov.cover(139);this.beforeEdit({type:this.mode,dataItem:this.dataItem,elem:this.elem});}if(this.mode == 'create'){cov.cover(140);this.dal.create(this.dataItem,function(updateModel){cov.cover(141);try{self.injector.setResource('$mode',null);if(gp.hasValue(updateModel.errors)){cov.cover(142);self.validate(updateModel);}else {cov.cover(143);returnedDataItem = gp.hasValue(updateModel.dataItem)?updateModel.dataItem:updateModel.data && updateModel.data.length?updateModel.data[0]:gp['implements'](updateModel,self.dataItem)?updateModel:self.dataItem; // copy to local dataItem so updateUI will bind to current data
// do a case-insensitive copy
gp.shallowCopy(returnedDataItem,self.dataItem,true);self.updateUI(self.config,self.dataItem,self.elem);if(self.removeCommandHandler)self.removeCommandHandler();}}catch(err) {var error=fail || gp.error;error(err);}if(self.button instanceof HTMLElement)gp.enable(self.button);self.removeBusy();if(typeof self.afterEdit == 'function'){cov.cover(144);self.afterEdit({type:self.mode,dataItem:self.dataItem,elem:self.elem});}gp.applyFunc(done,self.config.node.api,updateModel);},function(e){cov.cover(145);self.removeBusy();gp.applyFunc(fail,self,e);});}else {cov.cover(146); // call the data layer with just the dataItem
// the data layer should respond with an updateModel
this.dal.update(this.dataItem,function(updateModel){cov.cover(147);try{self.injector.setResource('$mode',null);if(gp.hasValue(updateModel.errors)){cov.cover(148);self.validate(updateModel);}else {cov.cover(149); // copy the returned dataItem back to the internal data array
// use the existing dataItem if the response is empty
returnedDataItem = gp.hasValue(updateModel.dataItem)?updateModel.dataItem:updateModel.data && updateModel.data.length?updateModel.data[0]:gp['implements'](updateModel,self.dataItem)?updateModel:self.dataItem;gp.shallowCopy(returnedDataItem,self.dataItem,true);if(self.elem){cov.cover(150); // refresh the UI
self.updateUI(self.config,self.dataItem,self.elem);if(self.removeCommandHandler)self.removeCommandHandler();}}}catch(err) {fail(err);}if(self.button instanceof HTMLElement)gp.enable(self.button);self.removeBusy();if(typeof self.afterEdit == 'function'){cov.cover(151);self.afterEdit({type:self.mode,dataItem:self.dataItem,elem:self.elem});}gp.applyFunc(done,self.config.node,updateModel);},function(e){cov.cover(152);self.removeBusy();gp.applyFunc(fail,self,e);});}},addBusy:function addBusy(){cov.cover(153);this.$n.addClass('busy');},removeBusy:function removeBusy(){cov.cover(154);this.$n.removeClass('busy');},updateUI:function updateUI(){},validate:function validate(){},createDataItem:function createDataItem(){cov.cover(155);var field,dataItem={}; // set defaults
this.config.columns.forEach(function(col){cov.cover(156);var field=col.field || col.sort;if(gp.hasValue(field)){cov.cover(157);if(gp.hasValue(col.Type)){cov.cover(158);dataItem[field] = gp.getDefaultValue(col.Type);}else {cov.cover(159);dataItem[field] = '';}}}); // overwrite defaults with a model if specified
if(typeof this.config.model == 'object'){cov.cover(160);gp.shallowCopy(this.config.model,dataItem);}return dataItem;},setInjectorContext:function setInjectorContext(){cov.cover(161); // if we add multiple rows at once, the injector context 
// will have to be reset upon saving or cancelling
// because there are multiple editors, but only one injector
this.injector.setResource('$dataItem',this.dataItem).setResource('$mode',this.mode);}}; /***************\
 TableRowEditor
\***************/gp.TableRowEditor = function(config,dal,injector){cov.cover(162);var self=this;gp.Editor.call(this,config,dal,injector);this.elem = null;this.commandHandler = function(evt){cov.cover(163); // handle save or cancel
var command=$(this).val();if(/^(create|update|save)$/i.test(command)){cov.cover(164);self.button = evt.target; // prevent double clicking
gp.disable(self.button,5);self.save(null,self.httpErrorHandler);}else if(/^cancel$/i.test(command))self.cancel();};};gp.TableRowEditor.prototype = {save:gp.Editor.prototype.save,addBusy:gp.Editor.prototype.addBusy,removeBusy:gp.Editor.prototype.removeBusy,httpErrorHandler:gp.Editor.prototype.httpErrorHandler,createDataItem:gp.Editor.prototype.createDataItem,setInjectorContext:gp.Editor.prototype.setInjectorContext,addCommandHandler:function addCommandHandler(){cov.cover(165);$(this.elem).on('click','button[value]',this.commandHandler);},removeCommandHandler:function removeCommandHandler(){cov.cover(166);$(this.elem).off('click',this.commandHandler);},add:function add(dataItem){cov.cover(167);var tbody=this.$n.find('div.table-body > table > tbody'); // call the base add function
// the base function sets the injector's $mode and $dataItem resources
var obj=gp.Editor.prototype.add.call(this,dataItem);this.elem = $(this.injector.exec('tableRow',obj.uid));gp.ModelSync.bindElements(this.dataItem,this.elem);this.addCommandHandler();if(this.config.newrowposition === 'top'){cov.cover(168);tbody.prepend(this.elem);}else {cov.cover(169);tbody.append(this.elem);}if(typeof this.elem[0].scrollIntoView === 'function')this.elem[0].scrollIntoView();this.invokeEditReady();this.injector.setResource('$mode',null);return {dataItem:this.dataItem,elem:this.elem};},edit:function edit(dataItem,tr){cov.cover(170);var cells; // replace the cell contents of the table row with edit controls
// call the base add function
// the base function sets the injector's $mode and $dataItem resources
gp.Editor.prototype.edit.call(this,dataItem);this.elem = tr;this.addCommandHandler(); // grab a new row from the injector
cells = this.injector.exec('tableRowCells');$(tr).addClass('update-mode').empty().append(cells);gp.ModelSync.bindElements(dataItem,this.elem);this.invokeEditReady();this.injector.setResource('$mode',null);return {dataItem:dataItem,elem:this.elem};},cancel:function cancel(){cov.cover(171); // base cancel method either removes new dataItem or reverts the existing dataItem
// the base function sets the injector's $mode and $dataItem resources
gp.Editor.prototype.cancel.call(this);try{var tbl=$(this.elem).closest('table',this.$n),index;if($(this.elem).hasClass('create-mode')){cov.cover(172); // remove elem
$(this.elem).remove(); //tbl[0].deleteRow( $(this.elem)[0].rowIndex );
}else {cov.cover(173);this.updateUI();}}catch(ex) {gp.error(ex);}},validate:function validate(updateModel){cov.cover(174);if(typeof this.config.validate === 'function'){cov.cover(175);gp.applyFunc(this.config.validate,this,[this.elem,updateModel]);}else {cov.cover(176);var self=this,builder=new gp.StringBuilder(),errors,msg;builder.add('Please correct the following errors:\r\n'); // remove error class from inputs
$(self.elem).find('[name].error').removeClass('error');Object.getOwnPropertyNames(updateModel.errors).forEach(function(e){cov.cover(177);$(self.elem).find('[name="' + e + '"]').addClass('error');errors = updateModel.errors[e].errors;builder.add(e + ':\r\n').add( // extract the error message
errors.map(function(m){return '    - ' + m + '\r\n';}).join(''));});alert(builder.toString());}},updateUI:function updateUI(){cov.cover(178); // take the table row out of edit mode
var cells;this.injector.setResource('$mode','read');cells = this.injector.exec('tableRowCells');$(this.elem).removeClass('update-mode create-mode').empty().append(cells);},invokeEditReady:function invokeEditReady(){cov.cover(179);if(typeof this.editReady == 'function'){cov.cover(180);this.editReady({dataItem:this.dataItem,elem:this.elem});}}}; /***************\
   ModalEditor
\***************/gp.ModalEditor = function(config,dal,injector){cov.cover(181);gp.TableRowEditor.call(this,config,dal,injector);};gp.ModalEditor.prototype = {save:gp.Editor.prototype.save,addBusy:gp.Editor.prototype.addBusy,removeBusy:gp.Editor.prototype.removeBusy,httpErrorHandler:gp.Editor.prototype.httpErrorHandler,addCommandHandler:gp.TableRowEditor.prototype.addCommandHandler,removeCommandHandler:gp.TableRowEditor.prototype.removeCommandHandler,validate:gp.TableRowEditor.prototype.validate,createDataItem:gp.Editor.prototype.createDataItem,setInjectorContext:gp.Editor.prototype.setInjectorContext,invokeEditReady:gp.TableRowEditor.prototype.invokeEditReady,add:function add(dataItem){cov.cover(182);var self=this,html,modal; // the base function sets the injector's $mode and $dataItem resources
gp.Editor.prototype.add.call(this,dataItem); // mode: create or update
html = this.injector.exec('bootstrapModal'); // append the modal to the top node so button clicks will be picked up by commandHandlder
modal = $(html).appendTo(this.config.node).one('shown.bs.modal',function(){cov.cover(183); // IE9 can't add handlers until the modal is completely shown
self.addCommandHandler();self.invokeEditReady();});this.elem = modal[0];modal.modal({show:true,keyboard:true,backdrop:'static'});gp.ModelSync.bindElements(this.dataItem,this.elem);modal.one('hidden.bs.modal',function(){cov.cover(184);$(modal).remove();});return {dataItem:this.dataItem,elem:this.elem};},edit:function edit(dataItem){cov.cover(185);var self=this,html,modal; // the base function sets the injector's $mode and $dataItem resources
gp.Editor.prototype.edit.call(this,dataItem); // mode: create or update
html = this.injector.exec('bootstrapModal'); // append the modal to the top node so button clicks will be picked up by commandHandlder
modal = $(html).appendTo(this.config.node).one('shown.bs.modal',self.invokeEditReady.bind(self));this.elem = modal[0];modal.modal({show:true,keyboard:true,backdrop:'static'});gp.ModelSync.bindElements(dataItem,this.elem);modal.one('hidden.bs.modal',function(){cov.cover(186);$(modal).remove();});this.addCommandHandler();return {dataItem:dataItem,elem:this.elem};},cancel:function cancel(){cov.cover(187); // base cancel method either removes new dataItem or reverts the existing dataItem
// the base function sets the injector's $mode and $dataItem resources
gp.Editor.prototype.cancel.call(this);$(this.elem).modal('hide');},updateUI:function updateUI(){cov.cover(188);var tbody,tr,newTr,cells,newCells;$(this.elem).modal('hide');newTr = this.injector.exec('tableRow'); // if we added a row, add a row to the top of the table
if(this.mode == 'create'){cov.cover(189);tbody = this.$n.find('div.table-body > table > tbody');if(this.config.newrowposition === 'top'){cov.cover(190);tbody.prepend(newTr);}else {cov.cover(191);tbody.append(newTr);}}else {cov.cover(192); // find the existing table row for the dataItem
tr = gp.getTableRow(this.config.map,this.dataItem,this.config.node);cells = tr.find('td.body-cell');newCells = $(newTr).find('td.body-cell'); // replace the contents of the existing tr with that of the new one
cells.each(function(i){cov.cover(193);$(this).empty().append(newCells[i]);});}}}; /***************\
    helpers
\***************/gp.helpers = {sortStyle:function sortStyle(config){cov.cover(194); // remove glyphicons from sort buttons
var spans=$(config.node).find('a.table-sort > span.glyphicon-chevron-up,a.table-sort > span.glyphicon-chevron-down').removeClass('glyphicon-chevron-up glyphicon-chevron-down');if(!gp.isNullOrEmpty(config.pageModel.sort)){cov.cover(195);$(config.node).find('a.table-sort[data-sort="' + config.pageModel.sort + '"] > span').addClass(config.pageModel.desc?'glyphicon-chevron-down':'glyphicon-chevron-up');}}}; /***************\
   Initializer
\***************/gp.Initializer = function(node){cov.cover(196);this.parent = $(node);};gp.Initializer.prototype = { // this is called when using custom HTML to create grids
initialize:function initialize(callback){cov.cover(197);this.config = this.getConfig(this.parent);return this.initializeOptions(this.config,callback);}, // this is called when using JSON to create grids
initializeOptions:function initializeOptions(options,callback){cov.cover(198);var self=this;options.pageModel = {};options.ID = gp.createUID();this.config = options;this.config.map = new gp.DataMap();this.config.pageModel = gp['implements'](this.config.read,gp.PagingModel.prototype)?this.config.read:new gp.PagingModel();this.config.editmode = this.config.editmode || 'inline';this.config.newrowposition = this.config.newrowposition || 'top'; // this has to be defined before renderLayout
this.injector = new gp.Injector({$config:this.config,$columns:this.config.columns,$node:this.config.node,$pageModel:this.config.pageModel,$map:this.config.map,$data:this.config.pageModel.data,$mode:'read'},gp.templates,null,this.config); // specify gp.templates as root, null for context, config as override source
this.resolveCustomResource(this.config,this.injector); // this has to happen here so we can find the table-container
this.renderLayout(this.config,this.parent);this.config.node = this.parent.find('.table-container')[0];this.$n = this.parent.find('.table-container');var dal=new gp.DataLayer(this.config);var controller=new gp.Controller(this.config,dal,this.config.pageModel,this.injector);this.config.node.api = new gp.api(controller);this.config.hasFooter = this.resolveFooter(this.config);this.config.preload = this.config.preload === false?this.config.preload:true;this.injector.context = this.config.node.api;setTimeout(function(){cov.cover(199); // do this here to give external scripts a chance to run first
self.resolveTopLevelOptions(self.config);self.addEventDelegates(self.config,controller); // provides a hook for extensions
controller.invokeDelegates(gp.events.beforeInit,self.config);if(self.config.preload){cov.cover(200); // we need both beforeInit and beforeread because beforeread is used after every read in the controller
// and beforeInit happens just once after the node is created, but before first read
controller.invokeDelegates(gp.events.beforeRead,self.config.pageModel);dal.read(self.config.pageModel,function(data){cov.cover(201);try{ // do a case-insensitive copy
gp.shallowCopy(data,self.config.pageModel,true);self.injector.setResource('$data',self.config.pageModel.data);gp.resolveTypes(self.config);self.resolveCommands(self.config);self.render(self.config);controller.init();if(typeof callback === 'function')callback(self.config);}catch(e) {gp.error(e);}controller.invokeDelegates(gp.events.onRead,self.config.pageModel);},function(e){cov.cover(202);controller.invokeDelegates(gp.events.httpError,e);alert('An error occurred while carrying out your request.');gp.error(e);});}else {cov.cover(203);gp.resolveTypes(self.config);self.resolveCommands(self.config);controller.init();}});return this.config;},getConfig:function getConfig(parentNode){cov.cover(204);var self=this,obj,colConfig,templates,config=gp.getAttributes(parentNode),gpColumns=$(parentNode).find('gp-column');config.columns = []; // create the column configurations
templates = 'header body edit footer'.split(' ');gpColumns.each(function(){cov.cover(205);colConfig = gp.getAttributes(this);config.columns.push(colConfig);self.resolveTemplates(templates,colConfig,this,'template');}); // resolve the various templates
this.resolveTemplates(Object.getOwnPropertyNames(gp.templates),config,parentNode,'');return config;},addEventDelegates:function addEventDelegates(config,controller){cov.cover(206);var self=this,name,fn,api=config.node.api;Object.getOwnPropertyNames(gp.events).forEach(function(event){cov.cover(207);name = gp.events[event];fn = config[name];if(typeof fn === 'string'){cov.cover(208);fn = gp.getObjectAtPath(fn);} // event delegates must point to a function
if(typeof fn == 'function'){cov.cover(209);config[name] = fn;controller.addDelegate(name,fn);}});},renderLayout:function renderLayout(config,parentNode){cov.cover(210);try{$(parentNode).html(this.injector.exec('container'));}catch(ex) {gp.error(ex);}},render:function render(config){cov.cover(211);var self=this;try{var node=config.node; // inject table rows, footer, pager and header style.
var body=this.$n.find('div.table-body');var footer=this.$n.find('div.table-footer');var pager=this.$n.find('div.table-pager');body.html(self.injector.exec('tableBody'));footer.html(self.injector.exec('footerTable'));pager.html(self.injector.exec('pagerBar'));gp.helpers.sortStyle(config); // sync column widths
if(config.fixedheaders || config.fixedfooters){cov.cover(212);var nodes=this.$n.find('.table-body > table > tbody > tr:first-child > td');window.addEventListener('resize',function(){cov.cover(213);self.syncColumnWidths(config);});}}catch(ex) {gp.error(ex);}},syncColumnWidths:function syncColumnWidths(config){cov.cover(214);var html=this.injector.exec('columnWidthStyle');this.$n.find('style.column-width-style').html(html);},resolveFooter:function resolveFooter(config){cov.cover(215);for(var i=0;i < config.columns.length;i++) {if(config.columns[i].footertemplate)return true;}return false;},resolveTopLevelOptions:function resolveTopLevelOptions(config){cov.cover(216); // resolve the top level configurations
var obj,options='rowselected searchfunction read create update destroy validate model'.split(' ');options.forEach(function(option){cov.cover(217);if(gp.hasValue(config[option])){cov.cover(218); // see if this config option points to an object
// otherwise it must be a URL
obj = gp.getObjectAtPath(config[option]);if(gp.hasValue(obj))config[option] = obj;}});},resolveTemplates:function resolveTemplates(names,config,node,suffix){cov.cover(219);var selector,template,prop,$node=$(node), // the data-template attribute can have multiple values: e.g. "edit body"
selectorTemplate='script[type="text/html"][data-template~="{{name}}"],template[data-template~="{{name}}"]';names.forEach(function(n){cov.cover(220);selector = gp.supplant(selectorTemplate,{name:n});template = $node.find(selector);if(template.length){cov.cover(221);for(var i=0;i < $node[0].children.length;i++) {if($node[0].children[i] == template[0]){cov.cover(222);prop = n + suffix;config[prop] = template[0].innerHTML;return;}}}});},resolveCommands:function resolveCommands(config){cov.cover(223);var match,val,commands,index=0;config.columns.forEach(function(col){cov.cover(224);if(typeof col.commands == 'string'){cov.cover(225);commands = [];col.commands.split(',').forEach(function(cmd){cov.cover(226);match = cmd.split(':');commands.push({text:match[0],value:match[1],btnClass:match[2],glyphicon:match[3]});});col.commands = commands;}if(Array.isArray(col.commands)){cov.cover(227);col.commands.forEach(function(cmd){cov.cover(228);cmd.text = cmd.text || cmd.value;cmd.value = cmd.value || cmd.text;cmd.btnClass = cmd.btnClass || (/delete|destroy/i.test(cmd.text)?'btn-danger':'btn-default');cmd.glyphicon = cmd.glyphicon || (/delete|destroy/i.test(cmd.text)?'glyphicon-remove':/edit/i.test(cmd.text)?'glyphicon-edit':'glyphicon-cog');cmd.func = cmd.func || gp.getObjectAtPath(cmd.value);});}});},resolveCustomResource:function resolveCustomResource(config,injector){cov.cover(229);if(config.inject && typeof config.inject == 'string'){cov.cover(230);var path=config.inject.match(gp.rexp.splitPath);injector.setResource(path[path.length - 1],gp.getObjectAtPath(config.inject));}}}; /***************\
    Injector
\***************/gp.Injector = function(resources,root,context,overrides){cov.cover(231);this.resources = resources;resources.$injector = this;resources.$window = window;this.root = root || window;this.context = context || this;this.overrides = overrides || {};};gp.Injector.prototype = {setResource:function setResource(name,value){cov.cover(232);this.resources[name] = value;return this;},base:function base(funcOrName,model){cov.cover(233);return this.exec(funcOrName,model,true);},exec:function exec(funcOrName,model,base){cov.cover(234);var args,html;if(typeof funcOrName == 'string'){cov.cover(235);if(base){cov.cover(236); // call the base function
funcOrName = this.root[funcOrName];}else {cov.cover(237); // check for override
funcOrName = this.overrides[funcOrName] || this.root[funcOrName];}}if(typeof funcOrName == 'function'){cov.cover(238);args = this.inject(funcOrName);if(gp.hasValue(model)){cov.cover(239);args.push(model);} // supply this injector as the context
return funcOrName.apply(this.context,args);}else {cov.cover(240); // assume this is a string template
// execute once against the resources, then against window to allow for functions
return gp.supplant.call(this.context,funcOrName,this.resources,this.resources);}return this;},inject:function inject(func){cov.cover(241);var self=this,params,args=[];if(func.$inject){cov.cover(242);params = func.$inject;}else {cov.cover(243);params = this.getParamNames(func);}params.forEach(function(param){cov.cover(244);if(self.resources.hasOwnProperty(param)){cov.cover(245);args.push(self.resources[param]);} // injectable params should start with $
else if(param[0] === '$'){cov.cover(246);throw "Unrecognized dependency: " + param;}});return args;}, // http://stackoverflow.com/questions/1007981/how-to-get-function-parameter-names-values-dynamically-from-javascript
getParamNames:function getParamNames(func){cov.cover(247);var STRIP_COMMENTS=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;var ARGUMENT_NAMES=/([^\s,]+)/g;var fnStr=func.toString().replace(STRIP_COMMENTS,'');var result=fnStr.slice(fnStr.indexOf('(') + 1,fnStr.indexOf(')')).match(ARGUMENT_NAMES);if(result === null)result = [];return result;}}; /***************\
   mock-http
\***************/(function(gp){cov.cover(248);gp.Http = function(){}; // http://stackoverflow.com/questions/1520800/why-regexp-with-global-flag-in-javascript-give-wrong-results
var routes={read:/read/i,update:/update/i,create:/create/i,destroy:/Delete/i};gp.Http.prototype = {post:function post(url,model,callback,error){cov.cover(249);model = model || {};if(routes.read.test(url)){cov.cover(250);getData(model,callback);}else if(routes.create.test(url)){cov.cover(251);window.data.products.push(model);callback(new gp.UpdateModel(model));}else if(routes.update.test(url)){cov.cover(252);callback(new gp.UpdateModel(model));}else {cov.cover(253);throw '404 Not found: ' + url;}},destroy:function destroy(url,callback,error){cov.cover(254);callback({Success:true,Message:''});}};var getData=function getData(model,callback){cov.cover(255);var count,d=window.data.products.slice(0,window.data.length);if(!gp.isNullOrEmpty(model.search)){cov.cover(256);var props=Object.getOwnPropertyNames(d[0]);var search=model.search.toLowerCase();d = d.filter(function(row){cov.cover(257);for(var i=0;i < props.length;i++) {if(row[props[i]] && row[props[i]].toString().toLowerCase().indexOf(search) !== -1){cov.cover(258);return true;}}return false;});}if(!gp.isNullOrEmpty(model.sort)){cov.cover(259);if(model.desc){cov.cover(260);d.sort(function(row1,row2){cov.cover(261);var a=row1[model.sort];var b=row2[model.sort];if(a === null){cov.cover(262);if(b != null){cov.cover(263);return 1;}}else if(b === null){cov.cover(264); // we already know a isn't null
return -1;}if(a > b){cov.cover(265);return -1;}if(a < b){cov.cover(266);return 1;}return 0;});}else {cov.cover(267);d.sort(function(row1,row2){cov.cover(268);var a=row1[model.sort];var b=row2[model.sort];if(a === null){cov.cover(269);if(b != null){cov.cover(270);return -1;}}else if(b === null){cov.cover(271); // we already know a isn't null
return 1;}if(a > b){cov.cover(272);return 1;}if(a < b){cov.cover(273);return -1;}return 0;});}}count = d.length;if(model.top !== -1){cov.cover(274);model.data = d.slice(model.skip).slice(0,model.top);}else {cov.cover(275);model.data = d;}model.errors = [];setTimeout(function(){cov.cover(276);callback(model);});};})(gridponent); /***************\
   ModelSync
\***************/gp.ModelSync = {rexp:{rTrue:/^true$/i,rFalse:/^false$/i},serialize:function serialize(form){cov.cover(277);var inputs=$(form).find(':input[name]'),arr,obj={};inputs.each(function(){cov.cover(278); // add properties for each named element in the form
// so unsuccessful form elements are still explicitly represented
obj[this.name] = null;});arr = $(inputs).serializeArray();arr.forEach(function(item){cov.cover(279); // if there are multiple elements with this name assume an array
if(obj[item.name] !== null && !Array.isArray(obj[item.name])){cov.cover(280);obj[item.name] = [obj[item.name]];}if(Array.isArray(obj[item.name])){cov.cover(281);obj[item.name].push(item.value);}else {cov.cover(282);obj[item.name] = item.value;}});return obj;},bindElements:function bindElements(model,context){cov.cover(283);var self=this,value;Object.getOwnPropertyNames(model).forEach(function(prop){cov.cover(284);value = model[prop];if(Array.isArray(value)){cov.cover(285);value.forEach(function(val){cov.cover(286);self.bindElement(prop,val,context);});}else {cov.cover(287);self.bindElement(prop,value,context);}});},bindElement:function bindElement(prop,value,context){cov.cover(288);var self=this,clean,elem;value = gp.hasValue(value)?value.toString():''; // is there a checkbox or radio with this name and value?
// don't select the value because it might throw a syntax error
elem = $(context).find('[type=checkbox][name="' + prop + '"],[type=radio][name="' + prop + '"]');if(elem.length > 0){cov.cover(289);clean = gp.escapeHTML(value);for(var i=0;i < elem.length;i++) {if(elem[i].value == value || elem[i].value == clean){cov.cover(290);elem[i].checked = true;return;}}} // check for boolean
if(/^(true|false)$/i.test(value)){cov.cover(291);elem = $(context).find('[type=checkbox][name="' + prop + '"][value=true],[type=checkbox][name="' + prop + '"][value=false]');if(elem.length > 0){cov.cover(292);elem.each(function(e){cov.cover(293);this.checked = self.rexp.rTrue.test(value) && self.rexp.rTrue.test(e.value) || self.rexp.rFalse.test(value) && self.rexp.rFalse.test(e.value);});return;}}elem = $(context).find('[name="' + prop + '"]');if(elem.length > 0){cov.cover(294); // inputs with a value property
if(elem[0].value !== undefined){cov.cover(295);elem.val(value);} // inputs without a value property (e.g. textarea)
else if(elem[0].innerHTML !== undefined){cov.cover(296);elem.html(value == null?'':gp.escapeHTML(value));}}},castValues:function castValues(model,columns){cov.cover(297);var col;Object.getOwnPropertyNames(model).forEach((function(prop){cov.cover(298);col = gp.getColumnByField(columns,prop);if(col && col.Type){cov.cover(299);model[prop] = this.cast(model[prop],col.Type);}}).bind(this));},cast:function cast(val,dataType){cov.cover(300);switch(dataType){case 'number':cov.cover(301);if($.isNumeric(val))return parseFloat(val);break;case 'boolean':cov.cover(302);return val != null && val.toLowerCase() == 'true';break;case null:cov.cover(303);case undefined:cov.cover(304);if(/true|false/i.test(val)){cov.cover(305); // assume boolean
return val != null && val.toLowerCase() == 'true';}return val === ''?null:val;break;default:cov.cover(306);return val === ''?null:val;break;}}}; /***************\
server-side pager
\***************/gp.ServerPager = function(url){cov.cover(307);this.url = url;};gp.ServerPager.prototype = {read:function read(model,callback,error){cov.cover(308);var copy=gp.shallowCopy(model); // delete anything we don't want to send to the server
var props=Object.getOwnPropertyNames(copy).forEach(function(prop){cov.cover(309);if(/^(page|top|sort|desc|search)$/i.test(prop) == false){cov.cover(310);delete copy[prop];}});var url=gp.supplant(this.url,model,model);var h=new gp.Http();h.post(url,copy,callback,error);}}; /***************\
client-side pager
\***************/gp.ClientPager = function(config){cov.cover(311);var value,self=this;this.data = config.pageModel.data;this.columns = config.columns.filter(function(c){cov.cover(312);return c.field !== undefined || c.sort !== undefined;});if(typeof config.searchfunction === 'function'){cov.cover(313);this.searchFilter = config.searchfunction;}else {cov.cover(314);this.searchFilter = function(row,search){cov.cover(315);var s=search.toLowerCase();for(var i=0;i < self.columns.length;i++) {value = gp.getFormattedValue(row,self.columns[i],false);if(gp.hasValue(value) && value.toString().toLowerCase().indexOf(s) !== -1){cov.cover(316);return true;}}return false;};}};gp.ClientPager.prototype = {read:function read(model,callback,error){cov.cover(317);try{var self=this,search,skip=this.getSkip(model); // don't modify the original array
model.data = this.data.slice(0,this.data.length); // filter first
if(!gp.isNullOrEmpty(model.search)){cov.cover(318); // make sure searchTerm is a string and trim it
search = $.trim(model.search.toString());model.data = model.data.filter(function(row){cov.cover(319);return self.searchFilter(row,search);});} // set totalrows after filtering, but before paging
model.totalrows = model.data.length;model.pagecount = this.getPageCount(model); // then sort
if(gp.isNullOrEmpty(model.sort) === false){cov.cover(320);var col=gp.getColumnByField(this.columns,model.sort);if(gp.hasValue(col)){cov.cover(321);var sortFunction=this.getSortFunction(col,model.desc);model.data.sort(function(row1,row2){cov.cover(322);return sortFunction(row1[model.sort],row2[model.sort]);});}} // then page
if(model.top !== -1){cov.cover(323);model.data = model.data.slice(skip).slice(0,model.top);}}catch(ex) {gp.error(ex);}callback(model);},getSkip:function getSkip(model){cov.cover(324);var data=model;if(data.pagecount == 0){cov.cover(325);return 0;}if(data.page < 1){cov.cover(326);data.page = 1;}else if(data.page > data.pagecount){cov.cover(327);return data.page = data.pagecount;}return (data.page - 1) * data.top;},getPageCount:function getPageCount(model){cov.cover(328);if(model.top > 0){cov.cover(329);return Math.ceil(model.totalrows / model.top);}if(model.totalrows === 0)return 0;return 1;},getSortFunction:function getSortFunction(col,desc){cov.cover(330);if(/^(number|date|boolean)$/.test(col.Type)){cov.cover(331);if(desc){cov.cover(332);return this.diffSortDesc;}return this.diffSortAsc;}else {cov.cover(333);if(desc){cov.cover(334);return this.stringSortDesc;}return this.stringSortAsc;}},diffSortDesc:function diffSortDesc(a,b){cov.cover(335);return b - a;},diffSortAsc:function diffSortAsc(a,b){cov.cover(336);return a - b;},stringSortDesc:function stringSortDesc(a,b){cov.cover(337);if(gp.hasValue(a) === false){cov.cover(338);if(gp.hasValue(b)){cov.cover(339);return 1;}return 0;}else if(gp.hasValue(b) === false){cov.cover(340); // we already know a isn't null
return -1;} // string sorting is the default if no type was detected
// so make sure what we're sorting is a string
if(a.toString().toLowerCase() > b.toString().toLowerCase()){cov.cover(341);return -1;}if(a.toString().toLowerCase() < b.toString().toLowerCase()){cov.cover(342);return 1;}return 0;},stringSortAsc:function stringSortAsc(a,b){cov.cover(343);if(gp.hasValue(a) === false){cov.cover(344);if(gp.hasValue(b)){cov.cover(345);return -1;}return 0;}else if(gp.hasValue(b) === false){cov.cover(346); // we already know a isn't null
return 1;} // string sorting is the default if no type was detected
// so make sure what we're sorting is a string
if(a.toString().toLowerCase() > b.toString().toLowerCase()){cov.cover(347);return 1;}if(a.toString().toLowerCase() < b.toString().toLowerCase()){cov.cover(348);return -1;}return 0;}}; /***************\
  FunctionPager
\***************/gp.FunctionPager = function(config){cov.cover(349);this.config = config;};gp.FunctionPager.prototype = {read:function read(model,callback,error){cov.cover(350);try{var self=this,result=this.config.read(model,callback.bind(this)); // check if the function returned a value instead of using the callback
if(gp.hasValue(result)){cov.cover(351);callback(result);}}catch(ex) {if(typeof error === 'function'){cov.cover(352);gp.applyFunc(error,this,ex);}else {cov.cover(353);gp.applyFunc(callback,this,this.config);}gp.error(ex);}}}; /***************\
  PagingModel
\***************/gp.PagingModel = function(data){cov.cover(354);var self=this; // properites are capitalized here because that's the convention for server-side classes (C#)
// we want the serialized version of the corresponding server-side class to look exactly like this prototype
this.top = -1; // this is a flag to let the pagers know if paging is enabled
this.page = 1;this.sort = '';this.desc = false;this.search = '';this.data = data || [];this.totalrows = data != undefined && data.length?data.length:0;this.pagecount = 0;Object.defineProperty(self,'pageindex',{get:function get(){cov.cover(355);return self.page - 1;}});Object.defineProperty(self,'skip',{get:function get(){cov.cover(356);if(self.top !== -1){cov.cover(357);if(self.pagecount === 0)return 0;if(self.page < 1)self.page = 1;else if(self.page > self.pagecount)return self.page = self.pagecount;return self.pageindex * self.top;}return 0;}});};gp.PagingModel.prototype = {top:-1, // this is a flag to let the pagers know if paging is enabled
page:1,sort:'',desc:false,search:'',data:data || [],totalrows:0,pagecount:0}; /***************\
  StringBuilder
\***************/gp.StringBuilder = function(){cov.cover(358);this.out = [];};gp.StringBuilder.prototype = {add:function add(str){cov.cover(359);this.out.push(str);return this;},escape:function escape(str){cov.cover(360);this.out.push(gp.escapeHTML(str));return this;},toString:function toString(){cov.cover(361);return this.out.join('');}}; /***************\
    templates
\***************/gp.templates = gp.templates || {};gp.templates.bodyCellContent = function($column,$dataItem,$injector){cov.cover(362);var self=this,template,format,val,glyphicon,btnClass,hasDeleteBtn=false,type=($column.Type || '').toLowerCase(),html=new gp.StringBuilder();if($dataItem == null)return;val = gp.getFormattedValue($dataItem,$column,true); // check for a template
if($column.bodytemplate){cov.cover(363);if(typeof $column.bodytemplate === 'function'){cov.cover(364);html.add(gp.applyFunc($column.bodytemplate,this,[$dataItem,$column]));}else {cov.cover(365);html.add(gp.supplant.call(this,$column.bodytemplate,$dataItem,[$dataItem,$column]));}}else if($column.commands && $column.commands.length){cov.cover(366);html.add('<div class="btn-group btn-group-xs" role="group">');$column.commands.forEach(function(cmd,index){cov.cover(367);html.add($injector.exec('button',cmd));});html.add('</div>');}else if(gp.hasValue(val)){cov.cover(368); // show a checkmark for bools
if(type === 'boolean'){cov.cover(369);if(val === true){cov.cover(370);html.add('<span class="glyphicon glyphicon-ok"></span>');}}else {cov.cover(371); // getFormattedValue has already escaped html
html.add(val);}}return html.toString();};gp.templates.bodyCellContent.$inject = ['$column','$dataItem','$injector'];gp.templates.bootstrapModal = function($config,$dataItem,$injector,$mode){cov.cover(372);var model={title:$mode == 'create'?'Add':'Edit',body:$injector.exec('bootstrapModalBody'),footer:$injector.exec('bootstrapModalFooter'),uid:$config.map.getUid($dataItem)};model.footer = model.footer || '<div class="btn-group"><button type="button" class="btn btn-default" value="cancel"><span class="glyphicon glyphicon-remove"></span>Close</button><button type="button" class="btn btn-primary" value="save"><span class="glyphicon glyphicon-save"></span>Save changes</button></div>';var html=new gp.StringBuilder();html.add('<div class="modal fade" tabindex="-1" role="dialog" data-uid="{{uid}}">').add('<div class="modal-dialog" role="document">').add('<div class="modal-content">').add('<div class="modal-header">') // the close button for the modal should cancel any edits, so add value="cancel"
.add('<button type="button" class="close" aria-label="Close" value="cancel"><span aria-hidden="true">&times;</span></button>').add('<h4 class="modal-title">{{title}}</h4>').add('</div>').add('<div class="modal-body">{{{body}}}</div>').add('<div class="modal-footer">{{{footer}}}</div>').add('</div>').add('<div class="gp-progress-overlay">').add('<div class="gp-progress gp-progress-container">').add('<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>').add('</div>').add('</div>').add('</div>').add('</div>');return gp.supplant.call(this,html.toString(),model);};gp.templates.bootstrapModal.$inject = ['$config','$dataItem','$injector','$mode'];gp.templates.bootstrapModalBody = function($config,$injector){cov.cover(373);var self=this,body=new gp.StringBuilder(); // not using a form element here because the modal is added as a child node of the grid component
// this will cause problems if the grid is inside another form (e.g. jQuery.validate will behave unexpectedly)
body.add('<div class="form-horizontal">');$config.columns.forEach(function(col){cov.cover(374);$injector.setResource('$column',col);var canEdit=!col.readonly && (gp.hasValue(col.field) || gp.hasValue(col.edittemplate));if(!canEdit)return;var formGroupModel={label:null,input:$injector.exec('editCellContent'),editclass:col.editclass}; // headers become labels
// check for a template
if(col.headertemplate){cov.cover(375);if(typeof col.headertemplate === 'function'){cov.cover(376);formGroupModel.label = gp.applyFunc(col.headertemplate,self,[col]);}else {cov.cover(377);formGroupModel.label = gp.supplant.call(self,col.headertemplate,[col]);}}else {cov.cover(378);formGroupModel.label = gp.escapeHTML(gp.coalesce([col.header,col.field,'']));}body.add($injector.exec('formGroup',formGroupModel));});body.add('</div>');return body.toString();};gp.templates.bootstrapModalBody.$inject = ['$config','$injector'];gp.templates.bootstrapModalFooter = function($columns,$injector){cov.cover(379);var cmdColumn=$columns.filter(function(col){cov.cover(380);return col.commands;});if(cmdColumn){cov.cover(381);$injector.setResource('$column',cmdColumn);return $injector.exec('editCellContent');}return '';};gp.templates.bootstrapModalFooter.$inject = ['$columns','$injector'];gp.templates.button = function(model){cov.cover(382);var template='<button type="button" class="btn {{btnClass}}" value="{{value}}"><span class="glyphicon {{glyphicon}}"></span>{{text}}</button>';return gp.supplant.call(this,template,model);};gp.templates.columnWidthStyle = function($config,$columns){cov.cover(383);var html=new gp.StringBuilder(),width,index=0,bodyCols=document.querySelectorAll('#' + $config.ID + ' .table-body > table > tbody > tr:first-child > td'); // even though the table might not exist yet, we still should render width styles because there might be fixed widths specified
$columns.forEach(function(col){cov.cover(384);if(col.width){cov.cover(385); // fixed width should include the body
html.add('#' + $config.ID + ' .table-header th.header-cell:nth-child(' + (index + 1) + '),').add('#' + $config.ID + ' .table-footer td.footer-cell:nth-child(' + (index + 1) + ')').add(',').add('#' + $config.ID + ' > .table-body > table > thead th:nth-child(' + (index + 1) + '),').add('#' + $config.ID + ' > .table-body > table > tbody td:nth-child(' + (index + 1) + ')').add('{ width:').add(col.width);if(isNaN(col.width) == false)html.add('px');html.add(';}');}else if(bodyCols.length && ($config.fixedheaders || $config.fixedfooters)){cov.cover(386); // sync header and footer to body
width = bodyCols[index].offsetWidth;html.add('#' + $config.ID + ' .table-header th.header-cell:nth-child(' + (index + 1) + '),').add('#' + $config.ID + ' .table-footer td.footer-cell:nth-child(' + (index + 1) + ')').add('{ width:').add(bodyCols[index].offsetWidth).add('px;}');}index++;});return html.toString();};gp.templates.columnWidthStyle.$inject = ['$config','$columns'];gp.templates.container = function($config,$injector){cov.cover(387);var html=new gp.StringBuilder();html.add('<div class="gp table-container ').add($injector.exec('containerClasses')).add('" id="').add($config.ID).add('">');if($config.search || $config.create || $config.toolbar){cov.cover(388);html.add('<div class="table-toolbar">');html.add($injector.exec('toolbar'));html.add('</div>');}if($config.fixedheaders){cov.cover(389);html.add('<div class="table-header">').add('<table class="table" cellpadding="0" cellspacing="0">').add($injector.exec('header')).add('</table>').add('</div>');}html.add('<div class="table-body ');if($config.fixedheaders){cov.cover(390);html.add('table-scroll');}html.add('">').add('<table class="table" cellpadding="0" cellspacing="0"><tbody></tbody></table>').add('</div>');if($config.fixedfooters){cov.cover(391);html.add('<div class="table-footer"></div>');}if($config.pager){cov.cover(392);html.add('<div class="table-pager"></div>');}html.add('<style type="text/css" class="column-width-style">').add($injector.exec('columnWidthStyle')).add('</style>').add('<div class="gp-progress-overlay">').add('<div class="gp-progress gp-progress-container">').add('<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>').add('</div>').add('</div>').add('</div>');return html.toString();};gp.templates.container.$inject = ['$config','$injector'];gp.templates.containerClasses = function($config){cov.cover(393);var classes=[];if($config.fixedheaders){cov.cover(394);classes.push('fixed-headers');}if($config.fixedfooters){cov.cover(395);classes.push('fixed-footers');}if($config.pager){cov.cover(396);classes.push('pager-' + $config.pager);}if($config.responsive){cov.cover(397);classes.push('table-responsive');}if($config.search){cov.cover(398);classes.push('search-' + $config.search);}if($config.rowselected){cov.cover(399);classes.push('selectable');}if($config.containerclass){cov.cover(400);classes.push($config.containerclass);}return classes.join(' ');};gp.templates.containerClasses.$inject = ['$config'];gp.templates.editCellContent = function($column,$dataItem,$mode,$config,$injector){cov.cover(401);var template,col=$column,html=new gp.StringBuilder(); // check for a template
if(col.edittemplate){cov.cover(402);if(typeof col.edittemplate === 'function'){cov.cover(403);html.add(gp.applyFunc(col.edittemplate,this,[$dataItem,col]));}else {cov.cover(404);html.add(gp.supplant.call(this,col.edittemplate,$dataItem,[$dataItem,col]));}}else if(col.commands){cov.cover(405);html.add('<div class="btn-group').add($config.editmode == 'inline'?' btn-group-xs':'').add('">').add($injector.exec('button',{btnClass:'btn-primary',value:$mode == 'create'?'create':'update',glyphicon:'glyphicon-save',text:'Save'})).add('<button type="button" class="btn btn-default" data-dismiss="modal" value="cancel">').add('<span class="glyphicon glyphicon-remove"></span>Cancel').add('</button>').add('</div>');}else {cov.cover(406);var val=$dataItem[col.field]; // render undefined/null as empty string
if(!gp.hasValue(val))val = '';html.add($injector.exec('input',{type:col.Type,name:col.field,value:"",required:$column.required || false}));}return html.toString();};gp.templates.editCellContent.$inject = ['$column','$dataItem','$mode','$config','$injector'];gp.templates.footer = function($columns,$injector){cov.cover(407);var self=this,html=new gp.StringBuilder();html.add('<tfoot>').add('<tr>');$columns.forEach(function(col){cov.cover(408);$injector.setResource('$column',col);html.add($injector.exec('footerCell'));});html.add('</tr>').add('</tfoot>');return html.toString();};gp.templates.footer.$inject = ['$columns','$injector'];gp.templates.footerCell = function($injector){cov.cover(409);var html=new gp.StringBuilder();html.add('<td class="footer-cell">').add($injector.exec('footerCellContent')).add('</td>');return html.toString();};gp.templates.footerCell.$inject = ['$injector'];gp.templates.footerCellContent = function($data,$column){cov.cover(410);var html=new gp.StringBuilder();if($column.footertemplate){cov.cover(411);if(typeof $column.footertemplate === 'function'){cov.cover(412);html.add(gp.applyFunc($column.footertemplate,this,[$column,$data]));}else {cov.cover(413);html.add(gp.supplant.call(this,$column.footertemplate,$column,[$column,$data]));}}return html.toString();};gp.templates.footerCellContent.$inject = ['$data','$column'];gp.templates.footerTable = function($injector){cov.cover(414);var html=new gp.StringBuilder();html.add('<table class="table" cellpadding="0" cellspacing="0">').add($injector.exec('footer')).add('</table>');return html.toString();};gp.templates.footerTable.$inject = ['$injector'];gp.templates.formGroup = function(model){cov.cover(415);var template='<div class="form-group {{editclass}}"><label class="col-sm-4 control-label">{{{label}}}</label><div class="col-sm-6">{{{input}}}</div></div>';return gp.supplant.call(this,template,model);};gp.templates.header = function($columns,$config,$injector){cov.cover(416); // depending on whether or not fixedheaders has been specified
// this template is rendered either in a table by itself or inside the main table
var html=new gp.StringBuilder();html.add('<thead><tr>');$columns.forEach(function(col){cov.cover(417);html.add($injector.setResource('$column',col).exec('headerCell'));});html.add('</tr></thead>');return html.toString();};gp.templates.header.$inject = ['$columns','$config','$injector'];gp.templates.headerCell = function($column,$config,$injector){cov.cover(418);var self=this,html=new gp.StringBuilder(),sort='';if($config.sorting){cov.cover(419); // if sort isn't specified, use the field
sort = gp.escapeHTML(gp.coalesce([$column.sort,$column.field]));}else {cov.cover(420); // only provide sorting where it is explicitly specified
if(gp.hasValue($column.sort)){cov.cover(421);sort = gp.escapeHTML($column.sort);}}html.add('<th class="header-cell ' + ($column.headerclass || '') + '"');if(gp.hasValue(sort)){cov.cover(422);html.add(' data-sort="' + sort + '"');}html.add('>');html.add($injector.exec('headerCellContent'));html.add('</th>');return html.toString();};gp.templates.headerCell.$inject = ['$column','$config','$injector'];gp.templates.headerCellContent = function($column,$config){cov.cover(423);var self=this,html=new gp.StringBuilder(),sort='';if($config.sorting){cov.cover(424); // if sort isn't specified, use the field
sort = gp.escapeHTML(gp.coalesce([$column.sort,$column.field]));}else {cov.cover(425); // only provide sorting where it is explicitly specified
if(gp.hasValue($column.sort)){cov.cover(426);sort = gp.escapeHTML($column.sort);}} // check for a template
if($column.headertemplate){cov.cover(427);if(typeof $column.headertemplate === 'function'){cov.cover(428);html.add(gp.applyFunc($column.headertemplate,self,[$column]));}else {cov.cover(429);html.add(gp.supplant.call(self,$column.headertemplate,$column,[$column]));}}else if(!gp.isNullOrEmpty(sort)){cov.cover(430);html.add('<a href="javascript:void(0);" class="table-sort" value="sort" data-sort="').escape(sort).add('">').escape(gp.coalesce([$column.header,$column.field,sort])).add('<span class="glyphicon"></span>').add('</a>');}else {cov.cover(431);html.escape(gp.coalesce([$column.header,$column.field,'']));}return html.toString();};gp.templates.headerCellContent.$inject = ['$column','$config'];gp.templates.input = function(model){cov.cover(432);var obj={type:model.type == 'boolean'?'checkbox':model.type == 'number'?'number':'text',name:model.name,value:model.type == 'boolean'?'true':model.type == 'date'?gp.format(model.value,'YYYY-MM-DD'):gp.escapeHTML(model.value),checked:model.type == 'boolean' && model.value?' checked':'', // Don't bother with the date input type.
// Indicate the type using data-type attribute so a custom date picker can be used.
// This sidesteps the problem of polyfilling browsers that don't support the date input type
// and provides a more consistent experience across browsers.
dataType:/^date/.test(model.type)?' data-type="date"':'',required:model.required?' required':''};var html=gp.supplant.call(this,'<input type="{{type}}" name="{{name}}" value="{{value}}" class="form-control"{{{dataType}}}{{checked}}{{required}} />',obj);if(model.required){cov.cover(433);html += '<span class="required"></span>';}return html;};gp.templates.pagerBar = function($pageModel){cov.cover(434);var pageModel=gp.shallowCopy($pageModel),html=new gp.StringBuilder();pageModel.IsFirstPage = pageModel.page === 1;pageModel.IsLastPage = pageModel.page === pageModel.pagecount;pageModel.HasPages = pageModel.pagecount > 1;pageModel.PreviousPage = pageModel.page === 1?1:pageModel.page - 1;pageModel.NextPage = pageModel.page === pageModel.pagecount?pageModel.pagecount:pageModel.page + 1;pageModel.firstPageClass = pageModel.IsFirstPage?'disabled':'';pageModel.lastPageClass = pageModel.IsLastPage?'disabled':'';if(pageModel.HasPages){cov.cover(435);html.add('<div class="btn-group">').add('<button class="ms-page-index btn btn-default {{firstPageClass}}" title="First page" value="page" data-page="1">').add('<span class="glyphicon glyphicon-triangle-left" aria-hidden="true"></span>').add('</button>').add('<button class="ms-page-index btn btn-default {{firstPageClass}}" title="Previous page" value="page" data-page="{{PreviousPage}}">').add('<span class="glyphicon glyphicon-menu-left" aria-hidden="true"></span>').add('</button>').add('</div>').add('<input type="number" name="page" value="{{page}}" class="form-control" style="width:75px;display:inline-block;vertical-align:middle" />').add('<span class="page-count"> of {{pagecount}}</span>').add('<div class="btn-group">').add('<button class="ms-page-index btn btn-default {{lastPageClass}}" title="Next page" value="page" data-page="{{NextPage}}">').add('<span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>').add('</button>').add('<button class="ms-page-index btn btn-default {{lastPageClass}}" title="Last page" value="page" data-page="{{pagecount}}">').add('<span class="glyphicon glyphicon-triangle-right" aria-hidden="true"></span>').add('</button>').add('</div>');}return gp.supplant.call(this,html.toString(),pageModel);};gp.templates.pagerBar.$inject = ['$pageModel'];gp.templates.tableBody = function($config,$injector){cov.cover(436);var html=new gp.StringBuilder();html.add('<table class="table" cellpadding="0" cellspacing="0">');if(!$config.fixedheaders){cov.cover(437);html.add($injector.exec('header'));}html.add('<tbody>').add($injector.exec('tableRows')).add('</tbody>');if($config.hasFooter && !$config.fixedfooters){cov.cover(438);html.add($injector.exec('footer'));}html.add('</table>');return html.toString();};gp.templates.tableBody.$inject = ['$config','$injector'];gp.templates.tableRow = function($injector,$mode,uid){cov.cover(439);var self=this,html=new gp.StringBuilder();html.add('<tr data-uid="').add(uid).add('"');if(/create|update/.test($mode)){cov.cover(440);html.add(' class="').add($mode).add('-mode"');}html.add(">").add($injector.exec('tableRowCells')).add('</tr>');return html.toString();};gp.templates.tableRow.$inject = ['$injector','$mode'];gp.templates.tableRowCell = function($column,$injector,$mode){cov.cover(441);var self=this,mode=$mode || 'read',html=new gp.StringBuilder();html.add('<td class="body-cell ');if($column.commands){cov.cover(442);html.add('commands ');}html.add($column.bodyclass).add('">');if(/create|update/.test(mode) && !$column.readonly){cov.cover(443);html.add($injector.exec('editCellContent'));}else {cov.cover(444);html.add($injector.exec('bodyCellContent'));}html.add('</td>');return html.toString();};gp.templates.tableRowCell.$inject = ['$column','$injector','$mode'];gp.templates.tableRowCells = function($columns,$injector){cov.cover(445);var self=this,html=new gp.StringBuilder();$columns.forEach(function(col){cov.cover(446); // set the current column for bodyCellContent template
$injector.setResource('$column',col);html.add($injector.exec('tableRowCell'));});return html.toString();};gp.templates.tableRowCells.$inject = ['$columns','$injector'];gp.templates.tableRows = function($data,$map,$injector){cov.cover(447);var self=this,html=new gp.StringBuilder(),uid;if(!$map){cov.cover(448);$map = new gp.DataMap();$injector.setResource('$map',$map);}if($data == null)return '';$data.forEach(function(dataItem){cov.cover(449); // set the current data item on the injector
$injector.setResource('$dataItem',dataItem); // assign a uid to the dataItem, pass it to the tableRow template
uid = $map.assign(dataItem);html.add($injector.exec('tableRow',uid));});return html.toString();};gp.templates.tableRows.$inject = ['$data','$map','$injector'];gp.templates.toolbar = function($config,$injector){cov.cover(450);var html=new gp.StringBuilder();if($config.search){cov.cover(451);html.add('<div class="input-group gridponent-searchbox">').add('<input type="text" name="search" class="form-control" placeholder="Search...">').add('<span class="input-group-btn">').add($injector.exec('button',{btnClass:'btn-default',value:'search',glyphicon:'glyphicon-search'})).add('</span>').add('</div>');}if($config.create){cov.cover(452);html.add($injector.exec('button',{btnClass:'btn-default',value:'AddRow',glyphicon:'glyphicon-plus',text:'Add'}));}return html.toString();};gp.templates.toolbar.$inject = ['$config','$injector']; /***************\
   UpdateModel
\***************/gp.UpdateModel = function(dataItem,validationErrors){cov.cover(453);this.dataItem = dataItem;this.errors = validationErrors;this.original = gp.shallowCopy(dataItem);}; /***************\
   utilities
\***************/(function(gp){cov.cover(454);gp.applyFunc = function(func,context,args,error){cov.cover(455);if(typeof func !== 'function')return; // anytime there's the possibility of executing 
// user-supplied code, wrap it with a try-catch block
// so it doesn't affect my component
try{if(args == undefined){cov.cover(456);return func.call(context);}else {cov.cover(457);args = Array.isArray(args)?args:[args];return func.apply(context,args);}}catch(e) {error = error || gp.error;gp.applyFunc(error,context,e);}};gp.coalesce = function(array){cov.cover(458);if(gp.isNullOrEmpty(array))return array;for(var i=0;i < array.length;i++) {if(gp.hasValue(array[i])){cov.cover(459);return array[i];}}return array[array.length - 1];};var FP=Function.prototype;var callbind=FP.bind?FP.bind.bind(FP.call):(function(call){cov.cover(460);return function(func){cov.cover(461);return function(){cov.cover(462);return call.apply(func,arguments);};};})(FP.call);var uids={};var slice=callbind(''.slice);var zero=0;var numberToString=callbind(zero.toString);gp.createUID = function(){cov.cover(463); // id's can't begin with a number
var key='gp' + slice(numberToString(Math.random(),36),2);return key in uids?createUID():uids[key] = key;};gp.disable = function(elem,seconds){cov.cover(464);$(elem).attr('disabled','disabled').addClass('disabled busy');if(typeof seconds == 'number' && seconds > 0){cov.cover(465);setTimeout(function(){cov.cover(466);gp.enable(elem);},seconds * 1000);}};gp.enable = function(elem){cov.cover(467);$(elem).removeAttr('disabled').removeClass('disabled busy');};var chars=[/&/g,/</g,/>/g,/"/g,/'/g,/`/g];var escaped=['&amp;','&lt;','&gt;','&quot;','&apos;','&#96;'];gp.escapeHTML = function(obj){cov.cover(468);if(typeof obj !== 'string'){cov.cover(469);return obj;}chars.forEach(function(char,i){cov.cover(470);obj = obj.replace(char,escaped[i]);});return obj;};gp.format = function(val,format){cov.cover(471);var type=gp.getType(val);try{if(/^(date|datestring)$/.test(type)){cov.cover(472);if(!window.moment)return val;format = format || 'M/D/YYYY h:mm a';return moment(val).format(format);}if(type === 'timestamp'){cov.cover(473);if(!window.moment)return val;format = format || 'M/D/YYYY h:mm a';val = parseInt(val.match(gp.rexp.timestamp)[1]);return moment(val).format(format);}if(type === 'number'){cov.cover(474);if(!window.numeral)return val; // numeral's defaultFormat option doesn't work as of 3/25/2016
format = format || '0,0';return numeral(val).format(format);}}catch(e) {gp.error(e);}return val;};gp.getAttributes = function(node){cov.cover(475);var config={},name,attr,attrs=$(node)[0].attributes;for(var i=attrs.length - 1;i >= 0;i--) {attr = attrs[i];name = attr.name.toLowerCase().replace('-',''); // convert "true", "false" and empty to boolean
config[name] = gp.rexp.trueFalse.test(attr.value) || attr.value === ''?attr.value === "true" || attr.value === '':attr.value;}return config;};gp.getColumnByField = function(columns,field){cov.cover(476);var col=columns.filter(function(c){return c.field === field || c.sort === field;});return col.length?col[0]:null;};gp.getCommand = function(columns,name){cov.cover(477); // find by value
var allCmds=[];columns.forEach(function(col){cov.cover(478);if(Array.isArray(col.commands)){cov.cover(479);allCmds = allCmds.concat(col.commands);}});var cmd=allCmds.filter(function(cmd){cov.cover(480);return cmd.value === name;});if(cmd.length > 0)return cmd[0];};gp.getDefaultValue = function(type){cov.cover(481);switch(type){case 'number':cov.cover(482);return 0;case 'boolean':cov.cover(483);return false;case 'date':cov.cover(484);default:cov.cover(485);return null;}};gp.getFormattedValue = function(row,col,escapeHTML){cov.cover(486);var type=(col.Type || '').toLowerCase(); // if type equals function, col.field is the function
var val=type === 'function'?col.field(row):row[col.field];if(/^(date|datestring|timestamp)$/.test(type)){cov.cover(487);return gp.format(val,col.format);}if(/^(number|function)$/.test(type) && col.format){cov.cover(488);return gp.format(val,col.format);} // if there's no type and there's a format and val is numeric then parse and format
if(type === '' && col.format && /^(?:\d*\.)?\d+$/.test(val)){cov.cover(489);return gp.format(parseFloat(val),col.format);}if(type === 'string' && escapeHTML){cov.cover(490);return gp.escapeHTML(val);}return val;};gp.getObjectAtPath = function(path,root){cov.cover(491);if(typeof path !== 'string')return path; // o is our placeholder
var o=root || window,segment;path = path.match(gp.rexp.splitPath);if(path[0] === 'window')path = path.splice(1);for(var i=0;i < path.length;i++) { // is this segment an array index?
segment = path[i];if(gp.rexp.indexer.test(segment)){cov.cover(492); // convert to int
segment = parseInt(/\d+/.exec(segment));}else if(gp.rexp.quoted.test(segment)){cov.cover(493);segment = segment.slice(1,-1);}o = o[segment];if(o === undefined)return;}return o;};gp.getTableRow = function(map,dataItem,node){cov.cover(494);var uid=map.getUid(dataItem);if(uid == -1)return;return $(node).find('tr[data-uid="' + uid + '"]');};gp.getType = function(a){cov.cover(495);if(a === null || a === undefined){cov.cover(496);return a;}if(a instanceof Date){cov.cover(497);return 'date';}if(typeof a === 'string'){cov.cover(498);if(gp.rexp.iso8601.test(a)){cov.cover(499);return 'datestring';}if(gp.rexp.timestamp.test(a)){cov.cover(500);return 'timestamp';}}if(Array.isArray(a)){cov.cover(501);return 'array';} // number string boolean function object
return typeof a;};gp.hasValue = function(val){cov.cover(502);return val !== undefined && val !== null;};gp['implements'] = function(obj1,obj2){cov.cover(503);if(typeof obj1 !== typeof obj2)return false; // they're both null or undefined
if(!gp.hasValue(obj1))return true; // do a case-insensitive compare
var toLower=function toLower(str){cov.cover(504);return str.toLowerCase();};var props1=Object.getOwnPropertyNames(obj1).map(toLower),props2=Object.getOwnPropertyNames(obj2).map(toLower);if(props1.length < props2.length){cov.cover(505);for(var i=0;i < props1.length;i++) {if(props2.indexOf(props1[i]) === -1)return false;}}else {cov.cover(506);for(var i=0;i < props2.length;i++) {if(props1.indexOf(props2[i]) === -1)return false;}}return true;};gp.isNullOrEmpty = function(val){cov.cover(507); // if a string or array is passed, it'll be tested for both null and zero length
// if any other data type is passed (no length property), it'll only be tested for null
return gp.hasValue(val) === false || val.length != undefined && val.length === 0;};gp.resolveTypes = function(config){cov.cover(508);var field,val,hasData=config && config.pageModel && config.pageModel.data && config.pageModel.data.length;config.columns.forEach(function(col){cov.cover(509);if(gp.hasValue(col.Type))return;field = gp.hasValue(col.field)?col.field:col.sort;if(gp.isNullOrEmpty(field))return;if(typeof field === 'function'){cov.cover(510); // don't execute the function here to find the type
// it should only be executed once by getFormattedValue
col.Type = 'function';return;} // give priority to the model, unless it contains a function
if(config.model){cov.cover(511);if(gp.hasValue(config.model[field]) && gp.getType(config.model[field]) !== 'function'){cov.cover(512);col.Type = gp.getType(config.model[field]);}}if(!gp.hasValue(col.Type) && hasData){cov.cover(513); // if we haven't found a value after 25 iterations, give up
for(var i=0;i < config.pageModel.data.length && i < 25;i++) {val = config.pageModel.data[i][field];if(val !== null){cov.cover(514);col.Type = gp.getType(val);break;}}}});};gp.rexp = {splitPath:/[^\[\]\.\s]+|\[\d+\]/g,indexer:/\[\d+\]/,iso8601:/^[012][0-9]{3}-[01][0-9]-[0123][0-9]/,timestamp:/\/Date\((\d+)\)\//,quoted:/^['"].+['"]$/,trueFalse:/true|false/i,json:/^\{.*\}$|^\[.*\]$/,copyable:/^(object|date|array|function)$/};gp.getMatchCI = function(array,str){cov.cover(515); // find str in array, ignoring case
if(gp.isNullOrEmpty(array))return null;if(!gp.hasValue(str))return null;var s=str.toLowerCase();for(var i=0;i < array.length;i++) {if(gp.hasValue(array[i]) && array[i].toLowerCase() === s)return array[i];}return null;};gp.shallowCopy = function(from,to,caseInsensitive){cov.cover(516);to = to || {}; // IE is more strict about what it will accept
// as an argument to getOwnPropertyNames
if(!gp.rexp.copyable.test(gp.getType(from)))return to;var desc,p,props=Object.getOwnPropertyNames(from),propsTo=Object.getOwnPropertyNames(to);props.forEach(function(prop){cov.cover(517);p = caseInsensitive?gp.getMatchCI(propsTo,prop) || prop:prop;if(to.hasOwnProperty(prop)){cov.cover(518); // check for a read-only property
desc = Object.getOwnPropertyDescriptor(to,prop);if(!desc.writable)return;}if(typeof from[prop] === 'function'){cov.cover(519);to[p] = from[prop]();}else {cov.cover(520);to[p] = from[prop];}});return to;};gp.supplant = function(str,o,args){cov.cover(521);var self=this,types=/^(string|number|boolean)$/,r; // raw: 3 curly braces
str = str.replace(/{{{([^{}]*)}}}/g,function(a,b){cov.cover(522);r = gp.getObjectAtPath(b,o);if(types.test(typeof r))return r; // models can contain functions
if(typeof r === 'function')return gp.applyFunc(r,self,args); // it's not in o, so check for a function
r = gp.getObjectAtPath(b);return typeof r === 'function'?gp.applyFunc(r,self,args):'';}); // escape HTML: 2 curly braces
return str.replace(/{{([^{}]*)}}/g,function(a,b){cov.cover(523);r = gp.getObjectAtPath(b,o);if(types.test(typeof r))return gp.escapeHTML(r); // models can contain functions
if(typeof r === 'function')return gp.escapeHTML(gp.applyFunc(r,self,args)); // it's not in o, so check for a function
r = gp.getObjectAtPath(b);return typeof r === 'function'?gp.escapeHTML(gp.applyFunc(r,self,args)):'';});}; // logging
gp.log = window.console?window.console.log.bind(window.console):function(){};gp.error = function(e){cov.cover(524);if(console && console.error){cov.cover(525);console.error(e);}};})(gridponent); // check for web component support
if(document.registerElement){cov.cover(526);gp.Gridponent = Object.create(HTMLElement.prototype);gp.Gridponent.createdCallback = function(){cov.cover(527);var init=new gp.Initializer(this);$(init.initialize.bind(init));};gp.Gridponent.detachedCallback = function(){cov.cover(528);var tbl=this.querySelector('.table-container');if(tbl && tbl.api)tbl.api.dispose();};document.registerElement('grid-ponent',{prototype:gp.Gridponent});}else {cov.cover(529); // no web component support
// provide a static function to initialize grid-ponent elements manually
gp.initialize = function(root){cov.cover(530);root = $(root || document)[0]; // jQuery stalls here, so don't use it
var nodes=root.querySelectorAll('grid-ponent');for(var i=0;i < nodes.length;i++) {new gp.Initializer(nodes[i]).initialize();}};$(function(){cov.cover(531);gp.initialize();});}})(gridponent);cov.maxCoverage = 531; // if result is an array of data, then applyFunc will end up only grabbing the first dataItem

